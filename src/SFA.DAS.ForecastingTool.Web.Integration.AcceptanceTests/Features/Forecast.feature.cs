// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.ForecastingTool.Web.Integration.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ForecastCalculator")]
    public partial class ForecastCalculatorFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Forecast.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ForecastCalculator", "\tIn order to forecast the cost of my apprenticeship funding\r\n\tI want to be shown " +
                    "figures that show the affordability", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Forecast adds numbers correctly")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.TestCaseAttribute("10000000", "100", "36000", "3600", "32400", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3100000", "75", "36000", "3504", "31680", new string[0])]
        public virtual void ForecastAddsNumbersCorrectly(string paybill, string english_Fraction, string total_Cost, string total_Employer_Contribution, string total_Goverment_Pays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Forecast adds numbers correctly", @__tags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given(string.Format("I have a paybill of {0} and my English Fraction is {1}", paybill, english_Fraction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "AppName",
                        "NumberOfApprentices",
                        "AppStartDate"});
            table1.AddRow(new string[] {
                        "Aerospace Engineer",
                        "1",
                        "2017-05-01"});
#line 8
 testRunner.When("I Have the following apprenticeships:", ((string)(null)), table1, "When ");
#line 12
 testRunner.Then(string.Format("the total cost should be {0}, total employer contribution {1} and total goverment" +
                        " pays {2}", total_Cost, total_Employer_Contribution, total_Goverment_Pays), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Forecasting Levy Payment with a large pot")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("BackEndTests")]
        [NUnit.Framework.TestCaseAttribute("13000000", "25", "13752", "1146", "24000", "1600", "6400", "45", "409", "525", "4729", new string[0])]
        [NUnit.Framework.TestCaseAttribute("13000000", "100", "54996", "4583", "24000", "1600", "6400", "0", "0", "0", "0", new string[0])]
        public virtual void ForecastingLevyPaymentWithALargePot(string paybill, string english_Fraction, string annual_Levy_Cost, string monthly_Levy_Cost, string appr_Totalcost, string app_Monthly_Cost, string final_MonthAchievemnt_Cost, string your_Monthly_Share, string government_Monthly_Share, string your_Final_Month_Share, string government_Final_Month_Share, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore",
                    "BackEndTests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Forecasting Levy Payment with a large pot", @__tags);
#line 23
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given(string.Format("I have a paybill of {0} and my English Fraction is {1}", paybill, english_Fraction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "AppName",
                        "AppCost",
                        "AppDuration",
                        "AppStartDate",
                        "NumberOfApprentices"});
            table2.AddRow(new string[] {
                        "Financial Services Administrator",
                        "12000",
                        "12",
                        "2017-05-01",
                        "2"});
#line 27
  testRunner.When("I Have the following apprenticeships:", ((string)(null)), table2, "When ");
#line 32
 testRunner.When(string.Format("My annual levy cost {0} and mothly levy cost {1} calculation are correct", annual_Levy_Cost, monthly_Levy_Cost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then(string.Format("the annual levy cost should be {0} and mothly levy cost should be {1}", annual_Levy_Cost, monthly_Levy_Cost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
 testRunner.When(string.Format("my monthly cost {0} and final month cost {1} and employer share cost {2} and gove" +
                        "rnment share cost {3} and emploer final month share cost {4} and government fina" +
                        "l month share cost {5} calcuation is correct", app_Monthly_Cost, final_MonthAchievemnt_Cost, your_Monthly_Share, government_Monthly_Share, your_Final_Month_Share, government_Final_Month_Share), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then(string.Format("the total annual cost of the apprenticeship should be {0}", appr_Totalcost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
 testRunner.Then(string.Format("the apprenticeship monthly cost should be {0}", app_Monthly_Cost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 40
 testRunner.Then(string.Format("the final month achievement cost should be {0}", final_MonthAchievemnt_Cost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.Then(string.Format("the employer monthly contribution cost should be {0}", your_Monthly_Share), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 42
 testRunner.Then(string.Format("the government monthly contribution cost should be {0}", government_Monthly_Share), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
 testRunner.Then(string.Format("the employer final month contribution cost should be {0}", your_Final_Month_Share), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
 testRunner.Then(string.Format("the government final month contribution cost should be {0}", government_Final_Month_Share), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Forecasting Levy Payment with small pot")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("BackEndTests")]
        [NUnit.Framework.TestCaseAttribute("5000000", "50", "5508", "459", "12000", "800", "3200", "34", "307", "274", "2467", new string[0])]
        [NUnit.Framework.TestCaseAttribute("7000000", "40", "8808", "734", "12000", "800", "3200", "6", "60", "246", "2220", new string[0])]
        public virtual void ForecastingLevyPaymentWithSmallPot(string paybill, string english_Fraction, string annual_Levy_Cost, string monthly_Levy_Cost, string appr_Totalcost, string app_Monthly_Cost, string final_MonthAchievemnt_Cost, string your_Monthly_Share, string government_Monthly_Share, string your_Final_Month_Share, string government_Final_Month_Share, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore",
                    "BackEndTests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Forecasting Levy Payment with small pot", @__tags);
#line 57
this.ScenarioSetup(scenarioInfo);
#line 59
 testRunner.Given(string.Format("I have a paybill of {0} and my English Fraction is {1}", paybill, english_Fraction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "AppName",
                        "AppCost",
                        "AppDuration",
                        "AppStartDate",
                        "NumberOfApprentices"});
            table3.AddRow(new string[] {
                        "Financial Services Administrator",
                        "12000",
                        "12",
                        "2017-05-01",
                        "1"});
#line 61
  testRunner.When("I Have the following apprenticeships:", ((string)(null)), table3, "When ");
#line 66
 testRunner.When(string.Format("My annual levy cost {0} and mothly levy cost {1} calculation are correct", annual_Levy_Cost, monthly_Levy_Cost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
 testRunner.Then(string.Format("the annual levy cost should be {0} and mothly levy cost should be {1}", annual_Levy_Cost, monthly_Levy_Cost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 70
 testRunner.When(string.Format("my monthly cost {0} and final month cost {1} and employer share cost {2} and gove" +
                        "rnment share cost {3} and emploer final month share cost {4} and government fina" +
                        "l month share cost {5} calcuation is correct", app_Monthly_Cost, final_MonthAchievemnt_Cost, your_Monthly_Share, government_Monthly_Share, your_Final_Month_Share, government_Final_Month_Share), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 72
 testRunner.Then(string.Format("the total annual cost of the apprenticeship should be {0}", appr_Totalcost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 73
 testRunner.Then(string.Format("the apprenticeship monthly cost should be {0}", app_Monthly_Cost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 74
 testRunner.Then(string.Format("the final month achievement cost should be {0}", final_MonthAchievemnt_Cost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 75
 testRunner.Then(string.Format("the employer monthly contribution cost should be {0}", your_Monthly_Share), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
 testRunner.Then(string.Format("the government monthly contribution cost should be {0}", government_Monthly_Share), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 77
 testRunner.Then(string.Format("the employer final month contribution cost should be {0}", your_Final_Month_Share), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 78
 testRunner.Then(string.Format("the government final month contribution cost should be {0}", government_Final_Month_Share), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Forecasting Levy Payment with no pot")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("BackEndTests")]
        [NUnit.Framework.TestCaseAttribute("3000000", "50", "0", "0", "12000", "800", "3200", "80", "720", "320", "2880", new string[0])]
        public virtual void ForecastingLevyPaymentWithNoPot(string paybill, string english_Fraction, string annual_Levy_Cost, string monthly_Levy_Cost, string appr_Totalcost, string app_Monthly_Cost, string final_MonthAchievemnt_Cost, string your_Monthly_Share, string government_Monthly_Share, string your_Final_Month_Share, string government_Final_Month_Share, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore",
                    "BackEndTests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Forecasting Levy Payment with no pot", @__tags);
#line 88
this.ScenarioSetup(scenarioInfo);
#line 90
 testRunner.Given(string.Format("I have a paybill of {0} and my English Fraction is {1}", paybill, english_Fraction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "AppName",
                        "AppCost",
                        "AppDuration",
                        "AppStartDate",
                        "NumberOfApprentices"});
            table4.AddRow(new string[] {
                        "Financial Services Administrator",
                        "12000",
                        "12",
                        "2017-05-01",
                        "1"});
#line 92
  testRunner.When("I Have the following apprenticeships:", ((string)(null)), table4, "When ");
#line 97
 testRunner.When(string.Format("My annual levy cost {0} and mothly levy cost {1} calculation are correct", annual_Levy_Cost, monthly_Levy_Cost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.Then(string.Format("the annual levy cost should be {0} and mothly levy cost should be {1}", annual_Levy_Cost, monthly_Levy_Cost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 101
 testRunner.When(string.Format("my monthly cost {0} and final month cost {1} and employer share cost {2} and gove" +
                        "rnment share cost {3} and emploer final month share cost {4} and government fina" +
                        "l month share cost {5} calcuation is correct", app_Monthly_Cost, final_MonthAchievemnt_Cost, your_Monthly_Share, government_Monthly_Share, your_Final_Month_Share, government_Final_Month_Share), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
 testRunner.Then(string.Format("the total annual cost of the apprenticeship should be {0}", appr_Totalcost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 104
 testRunner.Then(string.Format("the apprenticeship monthly cost should be {0}", app_Monthly_Cost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 105
 testRunner.Then(string.Format("the final month achievement cost should be {0}", final_MonthAchievemnt_Cost), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 106
 testRunner.Then(string.Format("the employer monthly contribution cost should be {0}", your_Monthly_Share), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 107
 testRunner.Then(string.Format("the government monthly contribution cost should be {0}", government_Monthly_Share), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 108
 testRunner.Then(string.Format("the employer final month contribution cost should be {0}", your_Final_Month_Share), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 109
 testRunner.Then(string.Format("the government final month contribution cost should be {0}", government_Final_Month_Share), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
